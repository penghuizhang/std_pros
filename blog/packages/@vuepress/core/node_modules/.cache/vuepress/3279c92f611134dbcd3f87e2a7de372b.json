{"remainingRequest":"E:\\code\\web\\vuepress\\blog\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!E:\\code\\web\\vuepress\\blog\\packages\\@vuepress\\core\\lib\\client\\util.js","dependencies":[{"path":"E:\\code\\web\\vuepress\\blog\\packages\\@vuepress\\core\\lib\\client\\util.js","mtime":1564424109000},{"path":"E:\\code\\web\\vuepress\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1564794366539},{"path":"E:\\code\\web\\vuepress\\blog\\node_modules\\babel-loader\\lib\\index.js","mtime":1564794366451}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}