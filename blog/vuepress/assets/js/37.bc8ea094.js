(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{355:function(t,a,e){"use strict";e.r(a);var r=e(28),s=Object(r.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("本章将介绍更多关于镜像的内容，包括：")]),t._v(" "),e("p",[t._v("从仓库获取镜像；\n管理本地主机上的镜像；\n介绍镜像实现的基本原理。")]),t._v(" "),e("h1",{attrs:{id:"启动容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动容器","aria-hidden":"true"}},[t._v("#")]),t._v(" 启动容器")]),t._v(" "),e("p",[t._v("启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。")]),t._v(" "),e("p",[t._v("因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。")]),t._v(" "),e("h2",{attrs:{id:"新建并启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建并启动","aria-hidden":"true"}},[t._v("#")]),t._v(" 新建并启动")]),t._v(" "),e("p",[t._v("所需要的命令主要为 docker run。")]),t._v(" "),e("p",[t._v("例如，下面的命令输出一个 “Hello World”，之后终止容器。")]),t._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ docker run ubuntu:14.04 /bin/echo 'Hello world'\n")])])]),e("p",[t._v("Hello world\n这跟在本地直接执行 /bin/echo 'hello world' 几乎感觉不出任何区别。")]),t._v(" "),e("p",[t._v("下面的命令则启动一个 bash 终端，允许用户进行交互。")]),t._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ docker run -t -i ubuntu:14.04 /bin/bash\n")])])]),e("p",[t._v("root@af8bae53bdd3:/#\n其中，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。")]),t._v(" "),e("p",[t._v("在交互模式下，用户可以通过所创建的终端来输入命令，例如")]),t._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("root@af8bae53bdd3:/# pwd\n/\nroot@af8bae53bdd3:/# ls\nbin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var\n")])])]),e("p",[t._v("当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：\n-检查本地是否存在指定的镜像，不存在就从公有仓库下载")]),t._v(" "),e("ul",[e("li",[t._v("利用镜像创建并启动一个容器")]),t._v(" "),e("li",[t._v("分配一个文件系统，并在只读的镜像层外面挂载一层可读写层")]),t._v(" "),e("li",[t._v("从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去")]),t._v(" "),e("li",[t._v("从地址池配置一个 ip 地址给容器")]),t._v(" "),e("li",[t._v("执行用户指定的应用程序")]),t._v(" "),e("li",[t._v("执行完毕后容器被终止")])]),t._v(" "),e("h2",{attrs:{id:"启动已终止容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动已终止容器","aria-hidden":"true"}},[t._v("#")]),t._v(" 启动已终止容器")]),t._v(" "),e("p",[t._v("可以利用 docker container start 命令，直接将一个已经终止的容器启动运行。")]),t._v(" "),e("p",[t._v("容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 ps 或 top 来查看进程信息。")]),t._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("root@ba267838cc1b:/# ps\n  PID TTY          TIME CMD\n    1 ?        00:00:00 bash\n   11 ?        00:00:00 ps\n")])])]),e("p",[t._v("可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。")]),t._v(" "),e("h1",{attrs:{id:"获取镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取镜像","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取镜像")])])},[],!1,null,null,null);a.default=s.exports}}]);