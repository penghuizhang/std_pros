(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{350:function(e,t,a){"use strict";a.r(t);var r=a(28),u=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"获取镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取镜像","aria-hidden":"true"}},[e._v("#")]),e._v(" 获取镜像")]),e._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("之前提到过，"),a("a",{attrs:{href:"https://hub.docker.com/search/?q=&type=image",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),a("OutboundLink")],1),e._v(" 上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像。")]),e._v(" "),a("p",[e._v("从 Docker 镜像仓库获取镜像的命令是 docker pull。其命令格式为：")]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]\n")])])]),a("p",[e._v("具体的选项可以通过 docker pull --help 命令看到，这里我们说一下镜像名称的格式。")]),e._v(" "),a("ul",[a("li",[e._v("Docker 镜像仓库地址：地址的格式一般是 <域名/IP>[:端口号]。默认地址是 Docker Hub。")]),e._v(" "),a("li",[e._v("仓库名：如之前所说，这里的仓库名是两段式名称，即 <用户名>/<软件名>。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。\n比如：")])]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker pull ubuntu:16.04\n16.04: Pulling from library/ubuntu\nbf5d46315322: Pull complete\n9f13e0ac480c: Pull complete\ne8988b5b3097: Pull complete\n40af181810e7: Pull complete\ne6f7c7e5c03e: Pull complete\nDigest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b492983ae97c3d643fbbe\nStatus: Downloaded newer image for ubuntu:16.04\n")])])]),a("p",[e._v("上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub 获取镜像。而镜像名称是 ubuntu:16.04，因此将会获取官方镜像 library/ubuntu 仓库中标签为 16.04 的镜像。")]),e._v(" "),a("p",[e._v("从下载过程中可以看到我们之前提及的分层存储的概念，镜像是由多层存储所构成。下载也是一层层的去下载，并非单一文件。下载过程中给出了每一层的 ID 的前 12 位。并且下载结束后，给出该镜像完整的 sha256 的摘要，以确保下载一致性。")]),e._v(" "),a("p",[e._v("在使用上面命令的时候，你可能会发现，你所看到的层 ID 以及 sha256 的摘要和这里的不一样。这是因为官方镜像是一直在维护的，有任何新的 bug，或者版本更新，都会进行修复再以原来的标签发布，这样可以确保任何使用这个标签的用户可以获得更安全、更稳定的镜像。")]),e._v(" "),a("p",[e._v("如果从 Docker Hub 下载镜像非常缓慢，可以参照 镜像加速器 一节配置加速器。")]),e._v(" "),a("h2",{attrs:{id:"运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行","aria-hidden":"true"}},[e._v("#")]),e._v(" 运行")]),e._v(" "),a("p",[e._v("有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。以上面的 ubuntu:16.04 为例，如果我们打算启动里面的 bash 并且进行交互式操作的话，可以执行下面的命令。")]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$ docker run -it --rm \\\n    ubuntu:16.04 \\\n    bash\nroot@e7009c6ce357:/# cat /etc/os-release\nNAME="Ubuntu"\nVERSION="16.04.4 LTS, Trusty Tahr"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME="Ubuntu 16.04.4 LTS"\nVERSION_ID="16.04"\nHOME_URL="http://www.ubuntu.com/"\nSUPPORT_URL="http://help.ubuntu.com/"\nBUG_REPORT_URL="http://bugs.launchpad.net/ubuntu/"\n')])])]),a("p",[e._v("docker run 就是运行容器的命令，我们这里简要的说明一下上面用到的参数。")]),e._v(" "),a("ul",[a("li",[e._v("ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。")]),e._v(" "),a("li",[e._v("bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。\n进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat /etc/os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 16.04.4 LTS 系统。")])]),e._v(" "),a("p",[e._v("最后我们通过 exit 退出了这个容器。")])])},[],!1,null,null,null);t.default=u.exports}}]);